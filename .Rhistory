model_data[[crop]] <- read.csv(paste0(file_path, crop, "_data.gzip"),
header=TRUE, sep=",", row.names=1, quote="",
comment="", stringsAsFactors=FALSE)
val_index[[crop]] <- read.csv(paste0(file_path, crop, "_index.csv"),
header=TRUE, sep=",", quote="",
comment="", stringsAsFactors=FALSE)
model_data[[crop]][, sapply(model_data[[crop]], is.integer)] <- lapply(model_data[[crop]][,
sapply(model_data[[crop]], is.integer)], as.factor)
#subtract the rows of the val_index data (which represent 20% of the model data,
#to be used for model validation) from the clean data set to be left with 80%
#of the model data to fit the model
fit_data[[crop]] <- model_data[[crop]][!rownames(model_data[[crop]]) %in% val_index[[crop]][["X0"]],]
}
print("Fitting the GLM and calculating the VIF")
model <- list()
VIF <- list()
inf_fact <- list()
for (crop in crops) {
# Fit gamma GLM with log link
#specify the model for each crop with a gamma distribution and the independent factors total nitrogen application,
#artificial phosphorus fertilizer application, total irrigation, pesticide application, temperature +
#moisture + soil class and a dummy indicating if the area is worked with agricultural machinery
model[[crop]] <- glm(
formula = Yield ~ n_total + irrigation_tot + mechanized + pesticides +
thz_class + mst_class + soil_class,
data = fit_data[[crop]],
family = Gamma(link = "log")
)
#Calculate VIF
#calculate GVIF, Df and GVIF^1/2*Df and save it in a data frame
inf_fact[[crop]] <- vif(model[[crop]])
VIF[[crop]] <- data.frame(inf_fact[crop])
}
##########################################
df = emmeans (model[['Corn']], ~ ., type = "response")
##########################################
df = emmeans (model[['Corn']], ~ , type = "response")
##########################################
df = emmeans (model[['Corn']], ~. , type = "response")
df = emmeans (model[['Corn']], ~ n_total + irrigation_tot + mechanized + pesticides +
thz_class + mst_class + soil_class, type = "response")
summary(df)
View(df)
data.frame(df)[,3]
View(df)
View(df)
##########################################
df = emmeans (model[['Corn']], ~ n_total, type = "response")
summary(df)
##########################################
df = emmeans (model[['Corn']], ~ n_total + pesticides, type = "response")
summary(df)
##########################################
df = emmeans (model[['Corn']], ~ pesticides, type = "response")
summary(df)
data.frame(df)[,3]
##########################################
df = emmeans (model[['Corn']], ~ mechanized, type = "response")
summary(df)
##########################################
df = emmeans (model[['Corn']], ~ thz_class, type = "response")
summary(df)
##########################################
df = emmeans (model[['Corn']], ~ n_total + mechanized, type = "response")
summary(df)
##########################################
df = emmeans (model[['Corn']], ~ n_total + pesticides + irrigation_tot, type = "response")
summary(df)
eff_size(df)
eff_size(df, edf=1)
eff_size(df, edf=1, sigma=3)
library(car)
library(openxlsx)
library(ggplot2)
library("ggResidpanel")
library(dplyr)
library(emmeans)
getwd()
file_path <- "processed/input/model/"
# Specify the crops
crops <- c("Corn", "Rice", "Soybean", "Wheat")
#######################################################
###Load and prepare model input data###################
######################################################
print("Reading crop and index data and defining calibration data")
# Load the clean data set for each crop and extract the model calibration
# data set by dropping all rows of the validation data set
model_data <- list()
val_index <- list()
fit_data <- list()
for (crop in crops) {
model_data[[crop]] <- read.csv(paste0(file_path, crop, "_data.gzip"),
header=TRUE, sep=",", row.names=1, quote="",
comment="", stringsAsFactors=FALSE)
val_index[[crop]] <- read.csv(paste0(file_path, crop, "_index.csv"),
header=TRUE, sep=",", quote="",
comment="", stringsAsFactors=FALSE)
model_data[[crop]][, sapply(model_data[[crop]], is.integer)] <- lapply(model_data[[crop]][,
sapply(model_data[[crop]], is.integer)], as.factor)
#subtract the rows of the val_index data (which represent 20% of the model data,
#to be used for model validation) from the clean data set to be left with 80%
#of the model data to fit the model
fit_data[[crop]] <- model_data[[crop]][!rownames(model_data[[crop]]) %in% val_index[[crop]][["X0"]],]
}
print("Fitting the GLM and calculating the VIF")
model <- list()
VIF <- list()
inf_fact <- list()
for (crop in crops) {
# Fit gamma GLM with log link
#specify the model for each crop with a gamma distribution and the independent factors total nitrogen application,
#artificial phosphorus fertilizer application, total irrigation, pesticide application, temperature +
#moisture + soil class and a dummy indicating if the area is worked with agricultural machinery
model[[crop]] <- glm(
formula = Yield ~ n_total + irrigation_tot + mechanized + pesticides +
thz_class + mst_class + soil_class,
data = fit_data[[crop]],
family = Gamma(link = "log")
)
#Calculate VIF
#calculate GVIF, Df and GVIF^1/2*Df and save it in a data frame
inf_fact[[crop]] <- vif(model[[crop]])
VIF[[crop]] <- data.frame(inf_fact[crop])
}
summary(model[[crop]])
stand_data <- list()
sd_stand <- list()
mean_stand <- list()
stand_pred <- list()
fit_data_sd <- list()
norm1 <- list()
norm2 <- list()
norm_pred <- list()
fit_data_norm <- list()
for (crop in crops) {
stand_data[[crop]] <- fit_data[[crop]][, c(6, 8, 9, 10)]
sd_stand[[crop]] <- apply(stand_data[[crop]], 2, sd)
mean_stand[[crop]] <- apply(stand_data[[crop]], 2, mean)
stand_pred[[crop]] <- (stand_data[[crop]] - mean_stand[[crop]])/ sd_stand[[crop]]
fit_data_sd[[crop]] <- cbind(stand_pred[[crop]], fit_data[[crop]][, c(4, 12, 13, 14, 15)])
norm1[[crop]] <- stand_data[[crop]] - apply(stand_data[[crop]], 2, min)
norm2[[crop]] <- apply(stand_data[[crop]], 2, function(x) max(x) - min(x))
norm_pred[[crop]] <- sweep(norm1[[crop]], 2, norm2[[crop]], `/`)
fit_data_norm[[crop]] <- cbind(norm_pred[[crop]], fit_data[[crop]][, c(4, 12, 13, 14, 15)])
}
model_stand <- list()
model_norm <- list()
for (crop in crops) {
model_stand[[crop]] <- glm(
formula = Yield ~ n_total + irrigation_tot + mechanized + pesticides +
thz_class + mst_class + soil_class,
data = fit_data_sd[[crop]],
family = Gamma(link = "log")
)
model_norm[[crop]] <- glm(
formula = Yield ~ n_total + irrigation_tot + mechanized + pesticides +
thz_class + mst_class + soil_class,
data = fit_data_norm[[crop]],
family = Gamma(link = "log")
)
}
stand_data <- list()
sd_stand <- list()
mean_stand <- list()
stand_pred <- list()
fit_data_sd <- list()
norm1 <- list()
norm2 <- list()
norm_pred <- list()
fit_data_norm <- list()
for (crop in crops) {
stand_data[[crop]] <- fit_data[[crop]][, c(6, 8, 9, 10)]
sd_stand[[crop]] <- apply(stand_data[[crop]], 2, sd)
mean_stand[[crop]] <- apply(stand_data[[crop]], 2, mean)
stand_pred[[crop]] <- (stand_data[[crop]] - mean_stand[[crop]])/ sd_stand[[crop]]
fit_data_sd[[crop]] <- cbind(stand_pred[[crop]], fit_data[[crop]][, c(4, 12, 13, 14, 15)])
norm1[[crop]] <- stand_data[[crop]] - apply(stand_data[[crop]], 2, min)
norm2[[crop]] <- apply(stand_data[[crop]], 2, function(x) max(x) - min(x))
norm_pred[[crop]] <- sweep(norm1[[crop]], 2, norm2[[crop]], `/`)
fit_data_norm[[crop]] <- cbind(norm_pred[[crop]], fit_data[[crop]][, c(4, 12, 13, 14, 15)])
}
View(fit_data)
model_stand <- list()
model_norm <- list()
for (crop in crops) {
model_stand[[crop]] <- glm(
formula = Yield ~ n_total + irrigation_tot + mechanized + pesticides +
thz_class + mst_class + soil_class,
data = fit_data_sd[[crop]],
family = Gamma(link = "log")
)
model_norm[[crop]] <- glm(
formula = Yield ~ n_total + irrigation_tot + mechanized + pesticides +
thz_class + mst_class + soil_class,
data = fit_data_norm[[crop]],
family = Gamma(link = "log")
)
}
library(car)
library(openxlsx)
library(ggplot2)
library("ggResidpanel")
library(dplyr)
library(emmeans)
# Define input file path
getwd()
file_path <- "processed/input/model/"
# Specify the crops
crops <- c("Corn", "Rice", "Soybean", "Wheat")
print("Reading crop and index data and defining calibration data")
# Load the clean data set for each crop and extract the model calibration
# data set by dropping all rows of the validation data set
model_data <- list()
val_index <- list()
fit_data <- list()
for (crop in crops) {
model_data[[crop]] <- read.csv(paste0(file_path, crop, "_data.gzip"),
header=TRUE, sep=",", row.names=1, quote="",
comment="", stringsAsFactors=FALSE)
val_index[[crop]] <- read.csv(paste0(file_path, crop, "_index.csv"),
header=TRUE, sep=",", quote="",
comment="", stringsAsFactors=FALSE)
model_data[[crop]][, sapply(model_data[[crop]], is.integer)] <- lapply(model_data[[crop]][,
sapply(model_data[[crop]], is.integer)], as.factor)
#subtract the rows of the val_index data (which represent 20% of the model data,
#to be used for model validation) from the clean data set to be left with 80%
#of the model data to fit the model
fit_data[[crop]] <- model_data[[crop]][!rownames(model_data[[crop]]) %in% val_index[[crop]][["X0"]],]
}
stand_data <- list()
sd_stand <- list()
mean_stand <- list()
stand_pred <- list()
fit_data_sd <- list()
norm1 <- list()
norm2 <- list()
norm_pred <- list()
fit_data_norm <- list()
for (crop in crops) {
stand_data[[crop]] <- fit_data[[crop]][, c(6, 8, 9, 10)]
sd_stand[[crop]] <- apply(stand_data[[crop]], 2, sd)
mean_stand[[crop]] <- apply(stand_data[[crop]], 2, mean)
stand_pred[[crop]] <- (stand_data[[crop]] - mean_stand[[crop]])/ sd_stand[[crop]]
fit_data_sd[[crop]] <- cbind(stand_pred[[crop]], fit_data[[crop]][, c(4, 12, 13, 14, 15)])
norm1[[crop]] <- stand_data[[crop]] - apply(stand_data[[crop]], 2, min)
norm2[[crop]] <- apply(stand_data[[crop]], 2, function(x) max(x) - min(x))
norm_pred[[crop]] <- sweep(norm1[[crop]], 2, norm2[[crop]], `/`)
fit_data_norm[[crop]] <- cbind(norm_pred[[crop]], fit_data[[crop]][, c(4, 12, 13, 14, 15)])
}
model_stand <- list()
model_norm <- list()
for (crop in crops) {
model_stand[[crop]] <- glm(
formula = Yield ~ n_total + irrigation_tot + mechanized + pesticides +
thz_class + mst_class + soil_class,
data = fit_data_sd[[crop]],
family = Gamma(link = "log")
)
model_norm[[crop]] <- glm(
formula = Yield ~ n_total + irrigation_tot + mechanized + pesticides +
thz_class + mst_class + soil_class,
data = fit_data_norm[[crop]],
family = Gamma(link = "log")
)
}
stand_data <- list()
sd_stand <- list()
mean_stand <- list()
stand_pred <- list()
fit_data_sd <- list()
norm1 <- list()
norm2 <- list()
norm_pred <- list()
fit_data_norm <- list()
for (crop in crops) {
stand_data[[crop]] <- fit_data[[crop]][, c(6, 8, 9, 10)]
sd_stand[[crop]] <- apply(stand_data[[crop]], 2, sd)
mean_stand[[crop]] <- apply(stand_data[[crop]], 2, mean)
stand_pred[[crop]] <- (stand_data[[crop]] - mean_stand[[crop]])/ sd_stand[[crop]]
fit_data_sd[[crop]] <- cbind(stand_pred[[crop]], fit_data[[crop]][, c(4, 12, 13, 14, 15)])
norm1[[crop]] <- stand_data[[crop]] - apply(stand_data[[crop]], 2, min)
norm2[[crop]] <- apply(stand_data[[crop]], 2, function(x) max(x) - min(x))
norm_pred[[crop]] <- sweep(norm1[[crop]], 2, norm2[[crop]], `/`)
fit_data_norm[[crop]] <- cbind(norm_pred[[crop]], fit_data[[crop]][, c(4, 12, 13, 14, 15)])
}
model_stand <- list()
model_norm <- list()
View(fit_data)
View(fit_data)
View(stand_data)
for (crop in crops) {
stand_data[[crop]] <- fit_data[[crop]][, c(7, 8, 9)]
sd_stand[[crop]] <- apply(stand_data[[crop]], 2, sd)
mean_stand[[crop]] <- apply(stand_data[[crop]], 2, mean)
stand_pred[[crop]] <- (stand_data[[crop]] - mean_stand[[crop]])/ sd_stand[[crop]]
fit_data_sd[[crop]] <- cbind(stand_pred[[crop]], fit_data[[crop]][, c(4, 11, 12, 13, 14)])
norm1[[crop]] <- stand_data[[crop]] - apply(stand_data[[crop]], 2, min)
norm2[[crop]] <- apply(stand_data[[crop]], 2, function(x) max(x) - min(x))
norm_pred[[crop]] <- sweep(norm1[[crop]], 2, norm2[[crop]], `/`)
fit_data_norm[[crop]] <- cbind(norm_pred[[crop]], fit_data[[crop]][, c(4, 11, 12, 13, 14)])
}
model_stand <- list()
model_norm <- list()
View(stand_data)
for (crop in crops) {
model_stand[[crop]] <- glm(
formula = Yield ~ n_total + irrigation_tot + mechanized + pesticides +
thz_class + mst_class + soil_class,
data = fit_data_sd[[crop]],
family = Gamma(link = "log")
)
model_norm[[crop]] <- glm(
formula = Yield ~ n_total + irrigation_tot + mechanized + pesticides +
thz_class + mst_class + soil_class,
data = fit_data_norm[[crop]],
family = Gamma(link = "log")
)
}
summary(model_stand[['Corn']])
exp(coef(model_stand[['Corn']]))
exp(coef(model_norm[['Corn']]))
exp(coef(model[['Corn']]))
print("Fitting the GLM and calculating the VIF")
model <- list()
VIF <- list()
inf_fact <- list()
for (crop in crops) {
# Fit gamma GLM with log link
#specify the model for each crop with a gamma distribution and the independent factors total nitrogen application,
#artificial phosphorus fertilizer application, total irrigation, pesticide application, temperature +
#moisture + soil class and a dummy indicating if the area is worked with agricultural machinery
model[[crop]] <- glm(
formula = Yield ~ n_total + irrigation_tot + mechanized + pesticides +
thz_class + mst_class + soil_class,
data = fit_data[[crop]],
family = Gamma(link = "log")
)
#Calculate VIF
#calculate GVIF, Df and GVIF^1/2*Df and save it in a data frame
inf_fact[[crop]] <- vif(model[[crop]])
VIF[[crop]] <- data.frame(inf_fact[crop])
}
exp(coef(model[['Corn']]))
exp(coef(model_norm[['Corn']]))
summary(model_stand[['Corn']])
exp(coef(model_stand[['Corn']]))
exp(coef(model_norm[['Corn']]))
exp(coef(model[['Corn']]))
View(sd_stand)
View(norm1)
View(norm2)
stand_data[['Corn']].max()
apply(stand_data[[crop]], 2, max)
stand_ max <- apply(stand_data[[crop]], 2, max)
stand_max <- apply(stand_data[[crop]], 2, max)
sweep(stand_max[[crop]], 2, sd_stand[[crop]], `/`)
sweep(stand_max, 2, sd_stand[[crop]], `/`)
stand_max <- apply(stand_data[[crop]], 2, max)
view(stand_max)
View(stand_max)
sd_wheat <- sd_stand[[crop]]
sweep(stand_max, 2, sd_wheat, `/`)
sweep(stand_max, sd_wheat, `/`)
stand_max/sd_wheat
exp(coef(model_stand[['Wheat']]))
exp(coef(model_norm[['Wheat']]))
exp(coef(model[['Wheat']]))
1.1114998*4.617118
0.1114998*4.617118
0.0005584*4.479073
0.0015654*379.8
0.3065802*1.836081
predict(model[[crop]], type="link")
View(stand_data)
View(fit_data_norm)
test <- data.frame(n_total = cbind(0, 379.80), pesticides = cbind(1.5, 1.5), irrigation_tot = cbind(0.8, 0.8),
mechanized = cbind(1, 1), thz_class = cbind(2, 2), mst_class = cbind(4, 4), soil_class = cbind(3,3))
View(test)
test <- data.frame(n_total = 0, 379.80, pesticides = 1.5, 1.5, irrigation_tot = 0.8, 0.8,
mechanized = 1, 1, thz_class = 2, 2, mst_class = 4, 4, soil_class = 3,3)
test <- data.frame(n_total = c(0, 379.80), pesticides = c(1.5, 1.5), irrigation_tot = c(0.8, 0.8),
mechanized = c(1, 1), thz_class = c(2, 2), mst_class = c(4, 4), soil_class = c(3,3))
test1 <- data.frame(n_total = c(0, 379.80), pesticides = c(1.5, 1.5), irrigation_tot = c(0.8, 0.8),
mechanized = c(1, 1), thz_class = c(2, 2), mst_class = c(4, 4), soil_class = c(3,3))
View(test1)
predict(model[[crop]], test1,type="response")
test1 <- data.frame(n_total = c(0, 379.80), pesticides = c(1.5, 1.5), irrigation_tot = c(0.8, 0.8),
mechanized = factor(c(1, 1)), thz_class = c(2, 2), mst_class = c(4, 4), soil_class = c(3,3))
View(test1)
test1 <- data.frame(n_total = c(0, 379.80), pesticides = c(1.5, 1.5), irrigation_tot = c(0.8, 0.8),
mechanized = factor(c(1, 1)), thz_class = factor(c(2, 2)), mst_class = factor(c(4, 4)), soil_class = factor(c(3,3)))
predict(model[[crop]], test1,type="response")
4331.759*1.8113423
test1 <- data.frame(n_total = c(150, 150), pesticides = c(0, 1.836081), irrigation_tot = c(0.8, 0.8),
mechanized = factor(c(1, 1)), thz_class = factor(c(2, 2)), mst_class = factor(c(4, 4)), soil_class = factor(c(3,3)))
predict(model[[crop]], test1,type="response")
0.3065802*1.6339349
3667.393* 1.6339349
View(sd_stand)
test1 <- data.frame(n_total = c(150, 150), pesticides = c(0, 0.3976683), irrigation_tot = c(0.8, 0.8),
mechanized = factor(c(1, 1)), thz_class = factor(c(2, 2)), mst_class = factor(c(4, 4)), soil_class = factor(c(3,3)))
predict(model[[crop]], test1,type="response")
3667.393* 1.1114998
test1 <- data.frame(n_total = c(0, 84.79326), pesticides = c(1.5, 1.5), irrigation_tot = c(0.8, 0.8),
mechanized = factor(c(1, 1)), thz_class = factor(c(2, 2)), mst_class = factor(c(4, 4)), soil_class = factor(c(3,3)))
predict(model[[crop]], test1,type="response")
4331.759*1.0005584
coef_wheat <- coef(model[[crop]])
coef_wheat <- coef(model[[crop]], type='response')
View(coef_wheat)
coef_wheat <- coef(model[[crop]])
sd_wheat <- apply(fit_data[[crop]], 2, sd)
View(sd_wheat)
sd_wheat[1]
stand1 <- coef_wheat * sd_wheat[4]
sd_wheat[4]
View(stand1)
View(coef_wheat)
stand1 <- coef_wheat[c(2,3,5)] * sd_wheat[4]
stand2 <- stand1/sd_wheat[7,8,9]
xasadifl <- sd_wheat[7,8,9]
stand2 <- stand1/sd_wheat[c(7,8,9)]
View(stand2)
stand1 <- coef_wheat[c(2,3,5)] * sd_wheat[c(7,8,9)]
stand2 <- stand1/sd_wheat[4]
View(stand2)
test2 <- predict(model[[crop]], test1,type="response")
test2[2]/test2[1]
test2[1]/test2[2]
View(test2)
test1 <- data.frame(n_total = c(0, 379.7951), pesticides = c(1.5, 1.5), irrigation_tot = c(0.8, 0.8),
mechanized = factor(c(1, 1)), thz_class = factor(c(2, 2)), mst_class = factor(c(4, 4)), soil_class = factor(c(3,3)))
test2 <- predict(model[[crop]], test1,type="response")
test2[1]/test2[2]
View(test2)
test1 <- data.frame(n_total = c(0, 379.7951), pesticides = c(1.836081, 1.836081), irrigation_tot = c(1, 1),
mechanized = factor(c(1, 1)), thz_class = factor(c(7, 7)), mst_class = factor(c(5, 5)), soil_class = factor(c(6,6)))
test2 <- predict(model[[crop]], test1,type="response")
test2[1]/test2[2]
norm_data <- lapply(crops, function(crop) fit_data[[crop]][, c(7, 8, 9)])
norm1 <- lapply(norm_data, function(data) data - apply(data, 2, min))
norm2 <- lapply(norm_data, function(data) apply(data, 2, function(x) max(x) - min(x)))
norm_pred <- Map(function(x, y) sweep(x, 2, y, `/`), norm1, norm2)
fit_data_norm <- Map(function(x, crop) cbind(x, fit_data[[crop]][, c(4, 11, 12, 13, 14)]), norm_pred, crops)
View(fit_data_norm)
View(fit_data_norm)
model_norm <- list()
for (crop in crops) {
model_norm[[crop]] <- glm(
formula = Yield ~ n_total + irrigation_tot + mechanized + pesticides +
thz_class + mst_class + soil_class,
data = fit_data_norm[[crop]],
family = Gamma(link = "log")
)
}
norm_data <- list()
norm1 <- list()
norm2 <- list()
norm_pred <- list()
fit_data_norm <- list()
for (crop in crops) {
norm_data[[crop]] <- fit_data[[crop]][, c(7, 8, 9)]
norm1[[crop]] <- norm_data[[crop]] - apply(norm_data[[crop]], 2, min)
norm2[[crop]] <- apply(norm_data[[crop]], 2, function(x) max(x) - min(x))
norm_pred[[crop]] <- sweep(norm1[[crop]], 2, norm2[[crop]], `/`)
fit_data_norm[[crop]] <- cbind(norm_pred[[crop]], fit_data[[crop]][, c(4, 11, 12, 13, 14)])
}
model_norm <- list()
for (crop in crops) {
model_norm[[crop]] <- glm(
formula = Yield ~ n_total + irrigation_tot + mechanized + pesticides +
thz_class + mst_class + soil_class,
data = fit_data_norm[[crop]],
family = Gamma(link = "log")
)
}
#combine all four data frames of VIF[[crop]] into one data frame
VIF_crops <- bind_cols(VIF)
for (crop in crops) {
VIF_crops <- VIF_crops %>%
mutate(!!paste0(crop, ".GVIF2") := (!!sym(paste0(crop, ".GVIF..1..2.Df.."))) ^ 2)
}
#order the columns alphabetically
VIF_crops <- VIF_crops[, order(names(VIF_crops))]
hs2 <- createStyle(
fontColour = "#000000", halign = "center",
valign = "center", textDecoration = "bold",
border = "TopBottomLeftRight"
)
# Load the existing Excel file
wb <- loadWorkbook("reports/Model_results.xlsx")
# remove the worksheet if a sheet with that name already exists
#removeWorksheet(wb, sheet = "Model_VIF")
# Add a new sheet with your data frame
addWorksheet(wb, "Model_VIF")
writeDataTable(wb, sheet = "Model_VIF", x = VIF_crops, rowNames=TRUE,
tableStyle = "None", headerStyle = hs2, firstColumn = TRUE)
# Save the updated Excel file
saveWorkbook(wb, "reports/Model_results.xlsx", overwrite = TRUE)
addWorksheet(wb, "Model_VIF")
# Load the existing Excel file
wb <- loadWorkbook("reports/Model_results.xlsx")
addWorksheet(wb, "Model_VIF")
writeDataTable(wb, sheet = "Model_VIF", x = VIF_crops, rowNames=TRUE,
tableStyle = "None", headerStyle = hs2, firstColumn = TRUE)
# Load the existing Excel file
wb <- loadWorkbook("reports/Model_results.xlsx")
addWorksheet(wb, "Model_VIF")
writeDataTable(wb, sheet = "Model_VIF", x = VIF_crops, rowNames=TRUE,
tableStyle = "None", headerStyle = hs2, firstColumn = TRUE)
# Save the updated Excel file
saveWorkbook(wb, "reports/Model_results.xlsx", overwrite = TRUE)
