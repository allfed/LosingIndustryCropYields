getwd()
library(readr)
library(tidyverse)
library(car)
library(openxlsx)
library("rstudioapi")
library("ggResidpanel")
library(dplyr)
file_path <- "processed/input/model/"
crops <- c("Corn", "Rice", "Soybean", "Wheat")
model_data <- list()
val_index <- list()
val_data <- list()
val_factors <- list()
fit_data <- list()
for (crop in crops) {
model_data[[crop]] <- read.csv(paste0(file_path, crop, "_data.gzip"),
header=TRUE, sep=",", row.names=1, quote="",
comment="", stringsAsFactors=FALSE)
val_index[[crop]] <- read.csv(paste0(file_path, crop, "_index.csv"),
header=TRUE, sep=",", quote="",
comment="", stringsAsFactors=FALSE)
model_data[[crop]][, sapply(model_data[[crop]], is.integer)] <- lapply(model_data[[crop]][,
sapply(model_data[[crop]], is.integer)], as.factor)
# select a random sample of 20% from the data set to set aside for later validation
val_data[[crop]] <- model_data[[crop]][rownames(model_data[[crop]]) %in% val_index[[crop]][["X0"]],]
#select the independent variables from the validation data set
val_factors[[crop]] <- val_data[[crop]][,c(6, 8:15)]
fit_data[[crop]] <- model_data[[crop]][!rownames(model_data[[crop]]) %in% val_index[[crop]][["X0"]],]
}
model <- list()
fit <- list()
val <- list()
VIF <- list()
inf_fact <- list()
for (crop in crops) {
# specify the model for each crop with a gamma distribution and the independent factors total nitrogen application,
# artificial phosphorus fertilizer application, total irrigation, pesticide application, temperature +
# moisture + soil class and a dummy indicating if the area is worked with agricultural machinery
model[[crop]] <- glm(
formula = Yield ~ n_total + p_fertilizer + irrigation_tot + mechanized + pesticides +
thz_class + mst_class + soil_class,
data = fit_data[[crop]],
family = Gamma(link = "log")
)
# Fit the models to the data
fit[[crop]] <- summary(model[[crop]])
# let the models predict yield values for the validation data
val[[crop]] <- predict(model[[crop]], newdata = val_factors[[crop]], type="response")
inf_fact[[crop]] <- vif(model[[crop]])
VIF[[crop]] <- data.frame(inf_fact[crop])
}
#combine all four data frames of VIF[[crop]] into one data frame
VIF_crops <- bind_cols(VIF)
# Calculate studentized residuals
std_resid <- rstandard(model)
# Calculate studentized residuals
std_resid <- rstandard(model[crop])
# Calculate studentized residuals
std_resid <- rstandard(model[[crop]])
# Plot studentized residuals
par(mfrow = c(2,2))
plot(model[[crop]])
resid_panel(model[[crop]])
method(fortify)
methods(fortify)
# Calculate studentized residuals
std_resid <- rstudent(model[[crop]])
plot.lm(model[[crop]])
plot(model[[crop]], cex=0.4)
glm.diag.plot(model[[crop]])
library("broom")
glm.diag.plot(model[[crop]])
library("boot")
glm.diag.plot(model[[crop]])
?boot
glm.diag.plots(model[[crop]])
resid_panel(model[[crop]], plots="R", type="stand.deviance",
smoother=TRUE, theme="classic")
View(VIF_crops)
View(VIF_crops)
resid_panel(model[[crop]], plots="R", type="stand.deviance",
theme="grey")
for (crop in crop_names) {
VIF_crops <- VIF_crops %>%
mutate(!!paste0(crop, ".GVIF2") := (!!sym(paste0(crop, ".GVIF..1..2.Df.."))) ^ 2)
}
for (crop in crops) {
VIF_crops <- VIF_crops %>%
mutate(!!paste0(crop, ".GVIF2") := (!!sym(paste0(crop, ".GVIF..1..2.Df.."))) ^ 2)
}
VIF_crops <- VIF_crops[, order(names(VIF_crops))]
View(VIF_crops)
resid <- studres(model[[crop]])
# Calculate the studentized residuals and fitted values
resid <- rstudent(model[[crop]])
fitted <- fitted(model[[crop]])
# Combine the residuals and fitted values into a data frame
resid_df <- data.frame(fitted, resid)
ggplot(data = resid_df, aes(x = fitted, y = resid)) +
geom_point() +
geom_hline(yintercept = 0, linetype = "dashed")
fitted_link <- fitted(model[[crop]], type="link")
# Combine the residuals and fitted values into a data frame
resid_df <- data.frame(fitted_link, resid)
ggplot(data = resid_df, aes(x = fitted_link, y = resid)) +
geom_point() +
geom_hline(yintercept = 0, linetype = "dashed")
?fitted()
fitted_link <- predict(model[[crop]], type="link")
fitted_link <- predict(model[[crop]],newdata = fit_data[[crop]] type="link")
fitted_link <- predict(model[[crop]],newdata = fit_data[[crop]], type="link")
print(fitted_link)
# Combine the residuals and fitted values into a data frame
resid_df <- data.frame(fitted_link, resid)
fitted_link <- predict(model[[crop]],#newdata = fit_data[[crop]],
type="link")
print(fitted_link)
# Combine the residuals and fitted values into a data frame
resid_df <- data.frame(fitted_link, resid)
ggplot(data = resid_df, aes(x = fitted_link, y = resid)) +
geom_point() +
geom_hline(yintercept = 0, linetype = "dashed")
hs2 <- createStyle(
fontColour = "#000000", halign = "center",
valign = "center", textDecoration = "bold",
border = "TopBottomLeftRight"
)
wb <- loadWorkbook("reports/Model_results.xlsx")
# Add a new sheet with your data frame
removeWorksheet(wb, sheet = "Model_VIF")
addWorksheet(wb, "Model_VIF")
writeDataTable(wb, sheet = "Model_VIF", x = VIF_crops, rowNames=TRUE,
tableStyle = "None", headerStyle = hs2, firstColumn = TRUE)
# Save the updated Excel file
saveWorkbook(wb, "reports/Model_results.xlsx", overwrite = TRUE)
?ggplot
View(resid_df)
# Combine the residuals and fitted values into a data frame
resid_df <- data.frame(rstudent(model[[crop]]), predict(model[[crop]], type="link"))
View(resid_df)
?data.frame
colnames(resid_df) <- setNames(c("fitted_link", "resid"))
?setNames
colnames(resid_df) <- setNames(c("fitted_link", "resid"), c("fitted_link", "resid"))
View(resid_df)
?geom_point
ggplot(data = resid_df, aes(x = fitted_link, y = resid)) +
geom_point(alpha = 0.05) +
geom_hline(yintercept = 0, linetype = "dashed")
# Combine the residuals and fitted values into a data frame
resid_df <- data.frame(rstudent(predict(model[[crop]], type="link"), model[[crop]]))
# Combine the residuals and fitted values into a data frame
resid_df <- data.frame(predict(model[[crop]], type="link"), rstudent(model[[crop]]))
colnames(resid_df) <- setNames(c("fitted_link", "resid"), c("fitted_link", "resid"))
View(resid_df)
ggplot(data = resid_df, aes(x = fitted_link, y = resid)) +
geom_point(alpha = 0.05) +
geom_hline(yintercept = 0, linetype = "dashed")
?shape
ggplot(data = resid_df, aes(x = fitted_link, y = resid)) +
geom_point(alpha = 0.05, shape=1) +
geom_hline(yintercept = 0, linetype = "dashed")
library(ggplot2)
ggplot(data = resid_df, aes(x = fitted_link, y = resid)) +
geom_point(alpha = 0.1, shape=1) +
geom_hline(yintercept = 0, linetype = "dashed")
file_path2 <- "reports/"
for (crop in crops){
# Combine the residuals and fitted values into a data frame
resid_df <- data.frame(predict(model[[crop]], type="link"), rstudent(model[[crop]]))
colnames(resid_df) <- setNames(c("fitted_link", "stud_resid"),
c("fitted_link", "stud_resid"))
resid_plot <- ggplot(data = resid_df, aes(x = fitted_link, y = stud_resid)) +
geom_point(alpha = 0.1, shape=1) +
geom_hline(yintercept = 0, linetype = "dashed")
ggsave(paste0(file_path2, crop, "_residuals_link.png"),plot = resid_plot,
width = 6, height = 4, dpi = 300)
}
file_path2 <- "figures/reports/"
for (crop in crops){
# Combine the residuals and fitted values into a data frame
resid_df <- data.frame(predict(model[[crop]], type="link"), rstudent(model[[crop]]))
colnames(resid_df) <- setNames(c("fitted_link", "stud_resid"),
c("fitted_link", "stud_resid"))
resid_plot <- ggplot(data = resid_df, aes(x = fitted_link, y = stud_resid)) +
geom_point(alpha = 0.1, shape=1) +
geom_hline(yintercept = 0, linetype = "dashed")
ggsave(paste0(file_path2, crop, "_residuals_link.png"),plot = resid_plot,
width = 6, height = 4, dpi = 300)
}
file_path2 <- "reports/figures/"
for (crop in crops){
# Combine the residuals and fitted values into a data frame
resid_df <- data.frame(predict(model[[crop]], type="link"), rstudent(model[[crop]]))
colnames(resid_df) <- setNames(c("fitted_link", "stud_resid"),
c("fitted_link", "stud_resid"))
resid_plot <- ggplot(data = resid_df, aes(x = fitted_link, y = stud_resid)) +
geom_point(alpha = 0.1, shape=1) +
geom_hline(yintercept = 0, linetype = "dashed")
ggsave(paste0(file_path2, crop, "_residuals_link.png"),plot = resid_plot,
width = 6, height = 4, dpi = 300)
}
resid_pan <- resid_panel(model[[crop]], plots="R", type="stand.deviance",
theme="grey")
ggsave(paste0(file_path2, crop, "_residuals.png"),plot = resid_pan,
width = 6, height = 4, dpi = 300)
ggplot(data = model[[crop]], aes(x = .fitted, y = .stdresid)) +
geom_point(shape = 24, fill = "red") +
labs(title = "Standardized Residuals vs. Fitted Values",
x = "Fitted Values", y = "Standardized Residuals")
?resid_panel
resid_pan <- resid_panel(model[[crop]], plots="R", type="stand.deviance",
theme="grey", axis.text.size = 8, alpha=0.1)
for (crop in crops){
resid_pan <- resid_panel(model[[crop]], plots="R", type="stand.deviance",
theme="grey", axis.text.size = 8)
ggsave(paste0(file_path2, crop, "_residuals.png"),plot = resid_pan,
width = 6, height = 4, dpi = 300)
}
View(val_data)
# Define input file path
getwd()
file_path <- "processed/input/model/"
# Specify the crops
crops <- c("Corn", "Rice", "Soybean", "Wheat")
model_data <- list()
val_index <- list()
val_data <- list()
val_factors <- list()
fit_data <- list()
for (crop in crops) {
model_data[[crop]] <- read.csv(paste0(file_path, crop, "_data.gzip"),
header=TRUE, sep=",", row.names=1, quote="",
comment="", stringsAsFactors=FALSE)
val_index[[crop]] <- read.csv(paste0(file_path, crop, "_index.csv"),
header=TRUE, sep=",", quote="",
comment="", stringsAsFactors=FALSE)
model_data[[crop]][, sapply(model_data[[crop]], is.integer)] <- lapply(model_data[[crop]][,
sapply(model_data[[crop]], is.integer)], as.factor)
# select a random sample of 20% from the data set to set aside for later validation
val_data[[crop]] <- model_data[[crop]][rownames(model_data[[crop]]) %in% val_index[[crop]][["X0"]],]
#select the independent variables from the validation data set
val_factors[[crop]] <- val_data[[crop]][,c(6, 8:15)]
# subtract the rows of the val_index data (which represent 20% of the model data, to be used
# for model validation) from the model_data to be left with 80% of the model data to fit the model
fit_data[[crop]] <- model_data[[crop]][!rownames(model_data[[crop]]) %in% val_index[[crop]][["X0"]],]
}
model <- list()
val <- list()
VIF <- list()
inf_fact <- list()
for (crop in crops) {
# Fit gamma GLM with log link
# specify the model for each crop with a gamma distribution and the independent factors total nitrogen application,
# artificial phosphorus fertilizer application, total irrigation, pesticide application, temperature +
# moisture + soil class and a dummy indicating if the area is worked with agricultural machinery
model[[crop]] <- glm(
formula = Yield ~ n_total + p_fertilizer + irrigation_tot + mechanized + pesticides +
thz_class + mst_class + soil_class,
data = fit_data[[crop]],
family = Gamma(link = "log")
)
# let the models predict yield values for the validation data
val[[crop]] <- predict(model[[crop]], newdata = val_factors[[crop]], type="response")
#Calculate VIF
#calculate GVIF, Df and GVIF^1/2*Df and save it in a data frame
inf_fact[[crop]] <- vif(model[[crop]])
VIF[[crop]] <- data.frame(inf_fact[crop])
}
###########################################################
### Fit gamma GLM, calculate VIF and save it to file#######
###########################################################
?vif
###########################################################
### Fit gamma GLM, calculate VIF and save it to file#######
###########################################################
??vif
library(car)
model <- list()
val <- list()
VIF <- list()
inf_fact <- list()
for (crop in crops) {
# Fit gamma GLM with log link
# specify the model for each crop with a gamma distribution and the independent factors total nitrogen application,
# artificial phosphorus fertilizer application, total irrigation, pesticide application, temperature +
# moisture + soil class and a dummy indicating if the area is worked with agricultural machinery
model[[crop]] <- glm(
formula = Yield ~ n_total + p_fertilizer + irrigation_tot + mechanized + pesticides +
thz_class + mst_class + soil_class,
data = fit_data[[crop]],
family = Gamma(link = "log")
)
# let the models predict yield values for the validation data
val[[crop]] <- predict(model[[crop]], newdata = val_factors[[crop]], type="response")
#Calculate VIF
#calculate GVIF, Df and GVIF^1/2*Df and save it in a data frame
inf_fact[[crop]] <- vif(model[[crop]])
VIF[[crop]] <- data.frame(inf_fact[crop])
}
#combine all four data frames of VIF[[crop]] into one data frame
VIF_crops <- bind_cols(VIF)
library(dplyr)
#order the columns alphabetically
VIF_crops <- VIF_crops[, order(names(VIF_crops))]
#combine all four data frames of VIF[[crop]] into one data frame
VIF_crops <- bind_cols(VIF)
for (crop in crops) {
VIF_crops <- VIF_crops %>%
mutate(!!paste0(crop, ".GVIF2") := (!!sym(paste0(crop, ".GVIF..1..2.Df.."))) ^ 2)
}
#order the columns alphabetically
VIF_crops <- VIF_crops[, order(names(VIF_crops))]
hs2 <- createStyle(
fontColour = "#000000", halign = "center",
valign = "center", textDecoration = "bold",
border = "TopBottomLeftRight"
)
library(ggplot2)
hs2 <- createStyle(
fontColour = "#000000", halign = "center",
valign = "center", textDecoration = "bold",
border = "TopBottomLeftRight"
)
library(openxlsx)
hs2 <- createStyle(
fontColour = "#000000", halign = "center",
valign = "center", textDecoration = "bold",
border = "TopBottomLeftRight"
)
View(VIF_crops)
wb <- loadWorkbook("reports/Model_results.xlsx")
# remove the worksheet if a sheet with that name already exists
removeWorksheet(wb, sheet = "Model_VIF")
# Add a new sheet with your data frame
addWorksheet(wb, "Model_VIF")
writeDataTable(wb, sheet = "Model_VIF", x = VIF_crops, rowNames=TRUE,
tableStyle = "None", headerStyle = hs2, firstColumn = TRUE)
# Save the updated Excel file
saveWorkbook(wb, "reports/Model_results.xlsx", overwrite = TRUE)
#specify the path where the plots will be saved
file_path2 <- "reports/figures/"
resid_df <- data.frame(predict(model[[crop]], type="link"), rstudent(model[[crop]]))
#rename the columns
colnames(resid_df) <- setNames(c("fitted_link", "stud_resid"),
c("fitted_link", "stud_resid"))
resid_plot <- ggplot(data = resid_df, aes(x = fitted_link, y = stud_resid)) +
geom_point(alpha = 0.1, shape=1) +
geom_hline(yintercept = 0, linetype = "dashed")
ggsave(paste0(file_path2, crop, "_residuals_link.png"),plot = resid_plot,
width = 6, height = 4, dpi = 300)
resid_pan <- resid_panel(model[[crop]], plots="R", type="stand.deviance",
theme="grey", axis.text.size = 8)
resid_pan <- ggplot2::resid_panel(model[[crop]], plots="R", type="stand.deviance",
theme="grey", axis.text.size = 8)
library("ggResidpanel")
resid_pan <- resid_panel(model[[crop]], plots="R", type="stand.deviance",
theme="grey", axis.text.size = 8)
for (crop in crops){
write.csv(val_data[[crop]], paste0(file_path, crop, "_val_data.gzip"), row.names=TRUE)
write.csv(val_factors[[crop]], paste0(file_path, crop, "_val_factors.gzip"), row.names=TRUE)
write.csv(val[[crop]], paste0(file_path, crop, "_val_pred.gzip"), row.names=TRUE)
}
for (crop in crops){
write.csv(val_data[[crop]], paste0(file_path, crop, "_val_data.csv"), row.names=TRUE)
write.csv(val_factors[[crop]], paste0(file_path, crop, "_val_factors.csv"), row.names=TRUE)
write.csv(val[[crop]], paste0(file_path, crop, "_val_pred.csv"), row.names=TRUE)
}
